{"version":3,"sources":["webpack:///./src/components/utils/API_v1.js","webpack:///./src/views/PageUpComing.vue?628c","webpack:///src/views/PageUpComing.vue","webpack:///./src/views/PageUpComing.vue?d589","webpack:///./src/views/PageUpComing.vue"],"names":["responseStore","storedResponse","getResponse","setResponse","response","axios","defaults","withCredentials","render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_s","envMode","staticRenderFns","PageUpComingvue_type_script_lang_js_","name","data","views_PageUpComingvue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__"],"mappings":"2IASA,SAASA,IACP,IAAIC,EAEJ,SAASC,IACP,OAAOD,EAGT,SAASE,EAAYC,GACnBH,EAAiBG,EAGnB,MAAO,CAAED,cAAaD,eAbxBG,IAAMC,SAASC,iBAAkB,EAgBTP,8CCvBxB,IAAAQ,EAAA,WAA0B,IAAAC,EAAAC,KAAaC,EAAAF,EAAAG,eAA0BC,EAAAJ,EAAAK,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,gBAA2B,CAAAF,EAAA,OAAYE,YAAA,QAAmB,CAAAN,EAAAO,GAAA,SAAAP,EAAAQ,GAAAR,EAAAS,SAAA,aACpKC,EAAA,GCcAC,uBAAA,CACAC,KAAA,eAEAC,KAHA,WAIA,OACAJ,QAAA,iBCpBsVK,EAAA,cCOtVC,EAAgBC,OAAAC,EAAA,KAAAD,CACdF,EACAf,EACAW,GACF,EACA,KACA,WACA,MAIeQ,EAAA,WAAAH","file":"js/chunk-7ad01876.2def1839.js","sourcesContent":["import axios from 'axios';\r\n\r\nlet versionNumber = 'v1';\r\n\r\nlet buildLocalAddress = '192.168.240.140';\r\nlet productionAddress = 'xmdsmdsj.club';\r\n\r\naxios.defaults.withCredentials = true;\r\n\r\nfunction responseStore() {\r\n  let storedResponse;\r\n\r\n  function getResponse() {\r\n    return storedResponse;\r\n  }\r\n\r\n  function setResponse(response) {\r\n    storedResponse = response;\r\n  }\r\n\r\n  return { setResponse, getResponse }\r\n}\r\n\r\nconst responseManager = responseStore();\r\n\r\n/**\r\n * Define your functions for each API here. Two functions for one API, the 'fake' function\r\n * and 'production' function.\r\n */\r\n\r\nfunction userLoginFake(succeeded) {\r\n  if (succeeded) {\r\n    return {\r\n      \"success\": true,\r\n      \"flag\": \"INFO_USER_LOGIN_SUCCEEDED\",\r\n      \"userData\": {\r\n          \"uuid\": 1,\r\n          \"userName\": \"Jon\",\r\n          \"userPwd\": \"12345\",\r\n          \"userEmail\": \"jon@233.com\",\r\n          \"userBio\": \"wahaha\",\r\n          \"userLevel\": \"User\"\r\n      }\r\n    }\r\n  } else {\r\n    return {\r\n      \"success\": false,\r\n      \"flag\": \"ERROR_USER_NAME_WRONG\"\r\n    }\r\n  }\r\n}\r\n\r\nfunction userLoginProd(address, data) {\r\n  return new Promise((resolve, reject) => {\r\n    axios.post('http://localhost:3000/v1/User/Login/', {\r\n      userName: data.userName,\r\n      userPwd: data.userPwd,\r\n    })\r\n    .then((response) => {\r\n      resolve(response.data)\r\n    })\r\n    .catch((error) => {\r\n      reject(error)\r\n    });\r\n  })\r\n}\r\n\r\n/**\r\n * Define your APIs here. Please notice that you need to define data obtain methods for\r\n * THREE modes plus ONE buildlocal mode.\r\n */\r\nexport default {\r\n  userLogin(ENV_CODE, data, succeeded, func_name) {\r\n    // Name of this API function\r\n    func_name = versionNumber + ': user_login';\r\n\r\n    // Choose working mode\r\n    if (ENV_CODE === 'production') {\r\n\r\n      throw (func_name + ' ERROR: production Mode is not defined!');\r\n\r\n    } else if (ENV_CODE === 'development') {\r\n\r\n      // return userLoginFake(succeeded);\r\n      let userres = userLoginProd(buildLocalAddress, data);\r\n      console.log('test', userres);\r\n      return userres;\r\n\r\n    } else if (ENV_CODE === 'buildlocal') {\r\n\r\n      throw (func_name + ' ERROR: buildlocal Mode is not defined!');\r\n\r\n    } else if (ENV_CODE === 'test') {\r\n\r\n      throw (func_name + ' ERROR: test Mode is not defined!');\r\n\r\n    } else {\r\n\r\n      throw ('ERROR: Mode is not defined!');\r\n\r\n    }\r\n  },\r\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"pageUpComing\"},[_c('div',{staticClass:\"test\"},[_vm._v(\"\\n    \"+_vm._s(_vm.envMode)+\"\\n  \")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"pageUpComing\">\r\n    <div class=\"test\">\r\n      {{ envMode }}\r\n    </div>\r\n    <!-- <button @click=\"addHellows\">Change</button> -->\r\n    <!-- <p>Aloha!</p> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport DataProvider from '@/components/utils/DataProvider.js';\r\nimport { mapState } from 'vuex';\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n  name: 'pageupcoming',\r\n\r\n  data() {\r\n    return {\r\n      envMode: process.env.VUE_APP_ENV_CODE\r\n    }\r\n  },\r\n\r\n  // computed: {\r\n  //   ...mapState({\r\n  //     count_test: state => state.count_test,\r\n  //   })\r\n  // },\r\n\r\n  // methods: {\r\n  //   ...mapActions({\r\n  //     addHellows: 'addHellows',\r\n  //     addHellowsAlt: 'addHellowsAlt',\r\n  //   })\r\n  // },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PageUpComing.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PageUpComing.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./PageUpComing.vue?vue&type=template&id=f2074368&scoped=true&\"\nimport script from \"./PageUpComing.vue?vue&type=script&lang=js&\"\nexport * from \"./PageUpComing.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"f2074368\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}