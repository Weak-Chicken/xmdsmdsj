(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-44d6b6d4"],{9263:function(t,r,e){"use strict";e.r(r);var n=function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("div",{staticClass:"pagePost"},[e("VirtualDataServer",{on:{"get-all-posts":t.getPosts}}),e("ol",t._l(t.posts,function(r){return e("li",{key:r.id,staticClass:"onePost"},[e("router-link",{attrs:{to:{name:"articlepage",params:{articleId:r.id,articleHtml:r.html}}}},[t._v("\n        "+t._s(r.title)+"\n      ")])],1)}),0)],1)},a=[],i=e("dcbce"),o={name:"pagepost",data:function(){return{posts:[]}},components:{VirtualDataServer:i["a"]},methods:{getPosts:function(t){this.posts=t}}},l=o,s=e("2877"),p=Object(s["a"])(l,n,a,!1,null,"150add9c",null);r["default"]=p.exports},aba0:function(t,r){t.exports="<h3>Goal:</h3>\r\n\r\n<h4>Improve the import html file process</h4>\r\n\r\n<p>\r\n  So far, in the virtual data server, it is painful to create each single html file and set a reference to them manually one by one.\r\n  Therefore, I'm going to introduce a smarter way to import html files.\r\n</p>\r\n\r\n<br>\r\n\r\n<p>\r\n  I thus require that the import way shall be auto identify the number of html files and set the id of articles based on their file names.\r\n</p>\r\n\r\n<hr>\r\n\r\n<h3>Steps:</h3>\r\n\r\n<ol>\r\n  <h4><li>Try to use nodejs fs module to read files in a folder</li></h4>\r\n\r\n  <p>\r\n    However, it seems that this is not working. \"fs\" module will throw an error out in Vue. Maybe I can try that later. But since reading\r\n    files directly from the server rather than database is not a good idea, I think trying to do this is meaningless.\r\n  </p>\r\n\r\n  <h4><li>At least, try to import html files dynamically.</li></h4>\r\n\r\n  <p>So I fisrt built a list for setting ids and titles of a html file. Then, try to import the html file based on its id. The code is </p>\r\n\r\n  <code>\r\n      function getAllPosts() {\r\n        let allPosts = [\r\n          {\r\n            id: '01',\r\n            html: '',\r\n            title: 'test'\r\n          },\r\n      \r\n          {\r\n            id: '02',\r\n            html: '',\r\n            title: 'test'\r\n          },\r\n        ]\r\n      \r\n        allPosts.forEach((item, index, arr) => {\r\n          import('@/temp/data/topics/' + item.id + '.html').then( module => item.html = module.default);\r\n        });\r\n      \r\n        return allPosts;\r\n      }\r\n      \r\n      export { getAllPosts };\r\n  </code>\r\n\r\n  <p>Now its importing dynamically.</p>\r\n\r\n  <h4><li>Then, I noticed that the original page cannot be shown here.</li></h4>\r\n\r\n  <p>So, now I decide to use a .Vue file to be the index</p>\r\n\r\n  <h4><li>Still, index.vue has problem</li></h4>\r\n\r\n  <p>\r\n    It always causes <strong>'import' and 'export' may only appear at the top level</strong>.\r\n  </p>\r\n\r\n  <p>\r\n    Since I have put so much time on this and this is not that important, I decide to import my files manually through the topicIndex.vue file\r\n  </p>\r\n</ol>"},ce77:function(t,r){t.exports="<h3>Goal:</h3>\r\n\r\n<h4>Build a post page, set the router properly</h4>\r\n\r\n<p>In this part, I'll try to build a post page on the front page and set router accordingly.</p>\r\n\r\n<br>\r\n\r\n<p>So far, no backend is involved.</p>\r\n\r\n<br>\r\n\r\n<p>Meadwhile, I'll try to combine the post page with article page to one url. i.e. article/ for posts while article/:articleId for articles</p>\r\n\r\n<hr>\r\n\r\n<h3>Steps:</h3>\r\n\r\n<ol>\r\n  <h4><li>Create a virtual data server</li></h4>\r\n  <p>\r\n    Due to our backend server is not ready, we need something to simulate a backend server to provide data to us through an API. Here I chose \r\n    to build a Vue file in temp folder to read and serve html data.\r\n  </p>\r\n  <code>\r\n      <template>\r\n          <div class=\"virtualDataServer\">\r\n        \r\n          </div>\r\n        </template>\r\n        \r\n        <script>\r\n        import HtmlMD from '@/temp/data/topics/01.html';\r\n        \r\n        export default {\r\n          name: 'virtualdataserver',\r\n        \r\n          data() {\r\n            return {\r\n              allPosts: [\r\n                {\r\n                  id: '01',\r\n                  html: HtmlMD,\r\n                  title: '',\r\n                },\r\n              ]\r\n            }\r\n          },\r\n        \r\n          mounted() {\r\n              this.$emit('get-all-posts', this.allPosts);\r\n          },\r\n        }\r\n        <\/script>\r\n  </code>\r\n  <h4><li>Create PostPage view</li></h4>\r\n  <p>\r\n    Since we're going to show a list of posts, so now we will need a post page here.\r\n  </p>\r\n  <p>\r\n    This post page should be able to read data from the virtual data server we have just built and show these pages as a list with\r\n    links.\r\n  </p>\r\n  <code>\r\n      <template>\r\n          <div class=\"postPage\">\r\n            <VirtualDataServer @get-all-posts=\"getPosts\"></VirtualDataServer>\r\n            <div class=\"onePagePosts\" v-for=\"post in posts\" v-bind:key=\"post.id\">\r\n              <router-link :to=\"{name: 'articlepage', params:{articleId: post.id, articleHtml: post.html}}\">\r\n                {{post.title}}\r\n              </router-link>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        \r\n        <script>\r\n        import VirtualDataServer from '@/temp/VirtualDataServer.vue';\r\n        \r\n        export default {\r\n          name: 'postpage',\r\n        \r\n          data() {\r\n            return {\r\n              posts:[]\r\n            }\r\n          },\r\n        \r\n          components: {\r\n            VirtualDataServer,\r\n          },\r\n        \r\n          methods: {\r\n            getPosts(allPosts) {\r\n              this.posts = allPosts;\r\n            }\r\n          }\r\n        }\r\n        <\/script>    \r\n  </code>\r\n  <p>\r\n    Notice that here I give the html content through router params.\r\n  </p>\r\n  <h4><li>Fix bugs</li></h4>\r\n  <p>\r\n    After using the upper method, I realized that passing parameters through router is a bad idea. If you run this code you'll notice that\r\n    once the page is refreshed, the data in router will be lost. Which will cause the page change to blank.\r\n  </p>\r\n  <p>\r\n    Therefore, I decide to let article page to re-obtain the data according to article id.\r\n  </p>\r\n  <p>\r\n    The changed code are given below:\r\n  </p>\r\n  <code>\r\n      <template>\r\n          <div class=\"articlePage\">\r\n            <VirtualDataServer @get-all-posts=\"getPosts\"></VirtualDataServer>\r\n            <div v-html=\"topicPlaceHolder\"></div>\r\n          </div>\r\n        </template>\r\n        \r\n        <script>\r\n        import VirtualDataServer from '@/temp/VirtualDataServer.vue';\r\n        \r\n        export default {\r\n          name: 'articlepage',\r\n        \r\n          data() {\r\n            return {\r\n              topicPlaceHolder: '',\r\n            }\r\n          },\r\n        \r\n          components: {\r\n            VirtualDataServer,\r\n          },\r\n        \r\n          methods: {\r\n            getPosts(allPosts) {\r\n              this.topicPlaceHolder = allPosts.filter(post => post.id == this.$route.params.articleId)[0].html; \r\n            }\r\n          }\r\n        }\r\n        <\/script>\r\n  </code>\r\n</ol>"},dcbce:function(t,r,e){"use strict";var n=function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("div",{staticClass:"virtualDataServer"},[e("TopicIndex",{on:{"get-all-topics":t.getAllTopics}})],1)},a=[],i=function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("div",{staticClass:"topicIndex"})},o=[],l=e("ce77"),s=e.n(l),p=e("aba0"),h=e.n(p),d={name:"topicindex",data:function(){return{topicArray:[{id:"00001",html:s.a,title:"Build a post page, set the router properly"},{id:"00002",html:h.a,title:"Improve the import html file process"}]}},mounted:function(){this.$emit("get-all-topics",this.topicArray)}},c=d,u=e("2877"),m=Object(u["a"])(c,i,o,!1,null,"080e9c01",null),f=m.exports,g={name:"virtualdataserver",data:function(){return{allPosts:[]}},components:{TopicIndex:f},methods:{getAllTopics:function(t){this.allPosts=t,this.$emit("get-all-posts",this.allPosts)}}},v=g,b=Object(u["a"])(v,n,a,!1,null,"6d108686",null);r["a"]=b.exports}}]);
//# sourceMappingURL=chunk-44d6b6d4.92a05e17.js.map